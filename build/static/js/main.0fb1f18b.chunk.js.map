{"version":3,"sources":["components/CurrentTime.js","Assets/WeatherIcons.js","components/WeatherCard.js","components/Accordion.js","components/WeatherDetail.js","components/WeatherOverview.js","App.js","index.js"],"names":["CurrentTime","thetimezone","currentTime","Date","toLocaleString","timeZone","hour","minute","WeatherIcons","iconID","size","icon","color","animate","WeatherCard","data","city","iconType","current","weather","timezone","todaysDate","Intl","DateTimeFormat","weekday","day","month","year","format","dt","className","Math","round","temp","description","humidity","Accordion","useState","clicked","setClicked","onClick","morn","eve","night","WeatherDetail","daily","length","shift","map","cities","longtitude","latitude","name","WeatherOverview","setData","montreal","setLatitude","setLongtitude","setCity","show","setShow","useEffect","fetch","process","then","response","json","newData","handleOnClick","App","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0fb1f18b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n//timezone  timezone_offset\r\n\r\n\r\nconst CurrentTime = ({ thetimezone }) => {\r\n\r\n    \r\n\r\n    const currentTime = new Date().toLocaleString('en-CA', {\r\n        timeZone: [thetimezone],\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n        }\r\n    )\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            {currentTime}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CurrentTime\r\n","import React from 'react'\r\nimport ReactAnimatedWeather from 'react-animated-weather';\r\n\r\n\r\n\r\n\r\nconst WeatherIcons = ({ iconID, size}) => {\r\n  const iconCode = {\r\n    \"01d\": \"CLEAR_DAY\",\r\n    \"01n\": \"CLEAR_DAY\",\r\n    \"02d\": \"PARTLY_CLOUDY_DAY\",\r\n    \"02n\": \"PARTLY_CLOUDY_DAY\",\r\n    \"03d\": \"CLOUDY\",\r\n    \"03n\": \"CLOUDY\",\r\n    \"04d\": \"CLOUDY\",\r\n    \"04n\": \"CLOUDY\",\r\n    \"09d\": \"RAIN\",\r\n    \"09n\": \"RAIN\",\r\n    \"10d\": \"RAIN\",\r\n    \"10n\": \"RAIN\",\r\n    \"11d\": \"RAIN\",\r\n    \"11n\": \"RAINY\",\r\n    \"13d\": \"SNOW\",\r\n    \"13n\": \"SNOW\",\r\n    \"50d\": \"FOG\",\r\n    \"50n\": \"FOG\",\r\n\r\n};\r\n\r\n\r\n  return (\r\n    <ReactAnimatedWeather\r\n      icon={iconCode[iconID]}\r\n      color=\"black\"\r\n      size={size}\r\n      animate={true}\r\n    />\r\n  );\r\n}\r\n\r\nexport default WeatherIcons","import React from 'react'\r\n\r\nimport CurrentTime from './CurrentTime'\r\nimport WeatherIcons from '../Assets/WeatherIcons'\r\n\r\n\r\n\r\nconst WeatherCard = ({ data, city}) => {\r\n\r\n    const iconType = (data.current.weather[0].icon)\r\n    const timezone = (data.timezone)\r\n    const todaysDate = new Intl.DateTimeFormat('en-UK', {weekday: 'long', day: '2-digit' , month: 'long', year: 'numeric'  }).format(new Date(data.current.dt * 1000))\r\n    \r\n    return (\r\n        \r\n        <div className='containerCard'>\r\n\r\n            \r\n            <p>{todaysDate}</p>\r\n            <h2>{city}</h2>\r\n            <CurrentTime thetimezone = {timezone} />\r\n            <div className='weatherOnly'>\r\n            <p>{Math.round(data.current.temp)} &deg; C</p>\r\n            <p>{data.current.weather[0].description}</p>\r\n            <WeatherIcons iconID={iconType} />\r\n            <p>humidity: {data.current.humidity} %</p>\r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default WeatherCard\r\n","import React, { useState } from 'react'\r\nimport WeatherIcons from '../Assets/WeatherIcons'\r\n\r\n\r\n\r\nconst Accordion = ({ day }) => {\r\n\r\n    const [clicked, setClicked] = useState(false)\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className='item'>\r\n                <div className='title'\r\n                    onClick={() => setClicked(!clicked)}>\r\n                    <div className='titleIcons'> {new Intl.DateTimeFormat('en-UK', { weekday: 'long', year: 'numeric', month: '2-digit', day: '2-digit' }).format(new Date(day.dt * 1000))} <WeatherIcons size='20' iconID={day.weather[0].icon} />\r\n                    </div>\r\n                    <div>{clicked ? '-' : '+'}</div>\r\n                </div>\r\n                {clicked && <div className='content'>\r\n                    <p>{`morning:${Math.round(day.temp.morn)}\\u00b0C noon:${Math.round(day.temp.day)}\\u00b0C  evening:${Math.round(day.temp.eve)}\\u00b0C  night:${Math.round(day.temp.night)}\\u00b0C`}</p>\r\n                </div>}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Accordion\r\n","import React from 'react'\r\nimport './WeatherDetail.css';\r\nimport Accordion from './Accordion';\r\n\r\n\r\n\r\nconst WeatherDetail = ({ data }) => {\r\n\r\n\r\n    if (data.daily.length > 7) {\r\n        data.daily.shift();\r\n    }\r\n\r\n    return (\r\n\r\n        <div className='containerForecast'>\r\n            <div className='accordion'>\r\n                {data.daily.map((day) => <Accordion day={day} />)}\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default WeatherDetail\r\n\r\n\r\n\r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport WeatherCard from './WeatherCard'\r\nimport WeatherDetail from './WeatherDetail'\r\n\r\nconst cities = {\r\n  'amsterdam': {\r\n    longtitude: 4.8897,\r\n    latitude: 52.374,\r\n    name: 'Amsterdam',\r\n  },\r\n  'montreal': {\r\n    longtitude: -73.5878,\r\n    latitude: 45.5088,\r\n    name: 'Montreal',\r\n  }\r\n};\r\n\r\nconst WeatherOverview = () => {\r\n  const [data, setData] = useState()\r\n  const [latitude, setLatitude] = useState(cities.montreal.latitude)\r\n  const [longtitude, setLongtitude] = useState(cities.montreal.longtitude)\r\n  const [city, setCity] = useState(cities.montreal.name)\r\n  const [show, setShow] = useState(false)\r\n\r\n  useEffect(() => {\r\n    fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${latitude}&lon=${longtitude}&exclude=hourly,minutely&units=metric&appid=${process.env.REACT_APP_OPENWEATHER_API_KEY}`)\r\n      .then((response) => response.json())\r\n      .then((newData) => setData(newData))\r\n\r\n\r\n\r\n  }, [latitude, longtitude]);\r\n\r\n  if (!data) return null\r\n\r\n  const handleOnClick = (city) => {\r\n    /*\r\n    const newLatitude = 52.374\r\n    setLatitude(newLatitude)\r\n    changeLongtitude()\r\n    changeCity()\r\n    */\r\n    \r\n    setLatitude(cities[city].latitude);\r\n    setLongtitude(cities[city].longtitude);\r\n    setCity(cities[city].name);\r\n    \r\n  }\r\n\r\n  /*const changeLongtitude = (e) => {\r\n    const newLongtitude = 4.8897\r\n    setLongtitude(newLongtitude)\r\n  }\r\n\r\n  const changeCity = (e) => {\r\n    const newCity = `Amsterdam`\r\n    setCity(newCity)\r\n  }\r\n\r\n  const handleOnClickBack = (e) => {\r\n    const newLatitudeBack = 45.5088\r\n    setLatitude(newLatitudeBack)\r\n    changeLongtitudeBack()\r\n    changeCityBack()\r\n  }\r\n\r\n  const changeLongtitudeBack = (e) => {\r\n    const newLongtitudeBack = -73.5878\r\n    setLongtitude(newLongtitudeBack)\r\n\r\n  }\r\n  const changeCityBack = (e) => {\r\n    const newCityBack = `Montreal`\r\n    setCity(newCityBack)\r\n  } */\r\n\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n\r\n\r\n      <div className='weatheroverview'>\r\n        <WeatherCard data={data} city={city} />\r\n      </div>\r\n      <div className='weatherDetail'\r\n        onClick={() => setShow(!show)}>\r\n        <button className='button'>7-day forecast</button>\r\n      </div>\r\n\r\n\r\n      {show && <WeatherDetail data={data} />}\r\n      <div className='buttonContainer'>\r\n        <button className='citybutton'\r\n          onClick={() => {\r\n            handleOnClick('amsterdam')\r\n          }}> the weather Amsterdam</button>\r\n        <button className='citybutton'\r\n          onClick={() => {\r\n            handleOnClick('montreal')\r\n          }}> the weather Montreal</button>\r\n      </div>\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default WeatherOverview\r\n","import React from 'react'\nimport WeatherOverview from './components/WeatherOverview';\n\n\nconst App = () => {\n\n\n\n  return (\n\n    <>\n      <div><WeatherOverview /></div>\n    </>\n\n  )\n}\n\nexport default App\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport WeatherDetail from './components/WeatherDetail'\n\n\n\n\nconst rootElement = document.getElementById('root')\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}